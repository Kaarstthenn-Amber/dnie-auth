/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package login;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;
import org.json.JSONObject;

/**
 *
 * @author KAARSTTHENN
 */
public class Login_Application extends javax.swing.JFrame {

    private WebSocketClient webSocketClient;

    /**
     * Creates new form Login_Application
     */
    public Login_Application() {
        initComponents();
        startWebSocketClient();
    }

    private void startWebSocketClient() {
        try {
            URI uri = new URI("ws://localhost:42884");
            webSocketClient = new WebSocketClient(uri) {
                @Override
                public void onOpen(ServerHandshake handshakedata) {
                    System.out.println("Connected to WebSocket server");
                }

                @Override
                public void onMessage(String message) {
                    System.out.println("Received message: " + message);
                    // Parse the message to extract the code
                    JSONObject jsonMessage = new JSONObject(message);
                    String code = jsonMessage.getString("code");

                    // Make a POST request with the extracted code
                    sendPostRequest(code);
                }

                @Override
                public void onClose(int code, String reason, boolean remote) {
                    System.out.println("WebSocket connection closed with exit code " + code + " additional info: " + reason);
                }

                @Override
                public void onError(Exception ex) {
                }
            };

            // Iniciar WebSocket en un nuevo hilo
            new Thread(() -> webSocketClient.connect()).start();
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
    }

    
    private void sendPostRequest(String code) {
        try {
            String postUrl = "https://example.com/api/post"; // Replace with your URL
            URL url = new URL(postUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json; utf-8");
            connection.setRequestProperty("Accept", "application/json");
            connection.setDoOutput(true);

            // Create JSON payload with the extracted code
            JSONObject jsonPayload = new JSONObject();
            jsonPayload.put("code", code);

            // Send the JSON payload
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = jsonPayload.toString().getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }

            // Check the response code
            int responseCode = connection.getResponseCode();
            System.out.println("POST Response Code: " + responseCode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btn_auth = new javax.swing.JButton();
        btn_exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Login Auth DNIe");

        btn_auth.setBackground(new java.awt.Color(51, 153, 255));
        btn_auth.setForeground(new java.awt.Color(255, 255, 255));
        btn_auth.setText("Auth DNIe");
        btn_auth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_authActionPerformed(evt);
            }
        });

        btn_exit.setBackground(new java.awt.Color(255, 51, 0));
        btn_exit.setForeground(new java.awt.Color(255, 255, 255));
        btn_exit.setText("Exit");
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btn_auth, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(98, 98, 98))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1)
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_auth, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_authActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_authActionPerformed
        // Get token auth

        try {
            // Definir la URL base
            String urlString = "https://serviciosportal.reniec.gob.pe/mwwd2/dnieauth.jnlp?v=1.0&p=";

            //Obtener Token de autorización
            String codeAuth = get_code_auth();

            // Definir cada argumento de localAppArgs en variables separadas
            String dnieAuthServer = "https://dnieauth.reniec.gob.pe/sso";
            String dnieAuthClientId = "test.20295613620.localapp";
            String dnieAuthRedirectUri = "http://localhost/authcallback";
            String dnieAuthScope = "all";
            String dnieAuthState = "abcdef123456";
            String localAppPath = "/96264a95-f36c-4d6a-a8d9-750b0ff6a766";
            String localAppPort = "42884";
            String localAppUseHttps = "false";
            String localAppConnectionTimeout = "5000";
            String localAppSingleInstance = "false";
            String localAppIdleTimeout = "28800000";

            // Crear el JSON que será enviado en la solicitud
            String jsonInputString = String.format(
                    "{\"localAppArgs\":["
                    + "\"dnieAuthServer=%s\","
                    + "\"dnieAuthClientId=%s\","
                    + "\"dnieAuthRedirectUri=%s\","
                    + "\"dnieAuthScope=%s\","
                    + "\"dnieAuthState=%s\","
                    + "\"localAppPath=%s\","
                    + "\"localAppPort=%s\","
                    + "\"localAppUseHttps=%s\","
                    + "\"localAppConnectionTimeout=%s\","
                    + "\"localAppSingleInstance=%s\","
                    + "\"localAppIdleTimeout=%s\""
                    + "]}", dnieAuthServer, dnieAuthClientId, dnieAuthRedirectUri, dnieAuthScope, dnieAuthState,
                    localAppPath, localAppPort, localAppUseHttps, localAppConnectionTimeout, localAppSingleInstance, localAppIdleTimeout
            );

            // Configurar la conexión HTTP
            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json; utf-8");
            connection.setRequestProperty("Accept", "application/json");
            connection.setDoOutput(true);

            // Enviar la solicitud
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = jsonInputString.getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }

            // Leer la respuesta
            int responseCode = connection.getResponseCode();
            System.out.println("Response Code: " + responseCode);

            // Aquí podrías añadir la lógica para manejar la respuesta si es necesario
        } catch (Exception e) {
            e.printStackTrace();
        }

        //Body request
        //Response DNI        

    }//GEN-LAST:event_btn_authActionPerformed

    private String get_code_auth() {
        String url = "https://dnieauth.reniec.gob.pe/sso/oauth/authorize?";
        String clientId = "test.20295613620.localapp";
        String redirectUri = "http://localhost/authcallback";
        String scope = "all";
        String state = "abcdef123456";
        int StatusOk = 200;
        String token = "";

        try {
            String fullUrl = url + "?client_id=" + URLEncoder.encode(clientId, "UTF-8")
                    + "&redirect_uri=" + URLEncoder.encode(redirectUri, "UTF-8")
                    + "&scope=" + URLEncoder.encode(scope, "UTF-8")
                    + "&state=" + URLEncoder.encode(state, "UTF-8");

            URL obj = new URL(fullUrl);

            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("GET");

            int responseCode = con.getResponseCode();

            if (responseCode == StatusOk) {
                BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                token = response.toString();
                return token;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return token;
    }
    private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login_Application().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_auth;
    private javax.swing.JButton btn_exit;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
